# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Build Pull Requests

on: [pull_request]

env:
  ELASTIC_APIKEY: ${{ secrets.ELASTIC_APIKEY }}
  ELASTIC_URL: ${{ secrets.ELASTIC_URL }}
  ELASTIC_CLOUD_APIKEY: ${{ secrets.ELASTIC_CLOUD_APIKEY }}
  ELASTIC_CLOUD_URL: ${{ secrets.ELASTIC_CLOUD_URL }}

jobs:
  # We build the project but the docker images and run all the tests
  build:
    if: false
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'
    - name: Display Maven information
      run: mvn --version
    - name: Build but the docker images
      run: mvn --batch-mode install -Ddocker.skip -DskipTests

  # We run unit tests
  unit:
    if: false
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      - name: Run all the unit tests
        run: mvn --batch-mode install -Ddocker.skip -DskipIntegTests

  # We run integration tests with elastic stack 8 (default)
  it:
    if: false
    runs-on: ubuntu-latest
    needs: unit
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      - name: Cache Docker images
        uses: AndreKurait/docker-cache@0.6.0
        with:
          key: fscrawler-docker-cache-${{ runner.os }}-${{ hashFiles('pom.xml') }}
        continue-on-error: true
      - name: Run the integration tests
        run: mvn --batch-mode install -Ddocker.skip -DskipUnitTests -Dtests.parallelism=1 -Dtests.output=always

  # We run integration tests with elastic stack 7
  it-es7:
    if: false
    runs-on: ubuntu-latest
    needs: unit
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      - name: Cache Docker images
        uses: AndreKurait/docker-cache@0.6.0
        with:
          key: fscrawler-docker-cache-${{ runner.os }}-${{ hashFiles('pom.xml') }}
        continue-on-error: true
      - name: Run the integration tests
        run: mvn --batch-mode install -Ddocker.skip -DskipUnitTests -Pes-7x -Dtests.parallelism=1

  # We run integration tests with elastic stack 6
  it-es6:
    if: false
    runs-on: ubuntu-latest
    needs: unit
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      - name: Cache Docker images
        uses: AndreKurait/docker-cache@0.6.0
        with:
          key: fscrawler-docker-cache-${{ runner.os }}-${{ hashFiles('pom.xml') }}
        continue-on-error: true
      - name: Run the integration tests
        run: mvn --batch-mode install -Ddocker.skip -DskipUnitTests -Pes-6x -Dtests.parallelism=1

  # We run integration tests with Elastic Cloud Elasticsearch service (if secrets are set)
  it-cloud:
    if: false
    runs-on: ubuntu-latest
    needs: it
    steps:
      - uses: actions/checkout@v4
        if: ${{ env.ELASTIC_CLOUD_APIKEY && env.ELASTIC_CLOUD_URL }}
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        if: ${{ env.ELASTIC_CLOUD_APIKEY && env.ELASTIC_CLOUD_URL }}
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      - name: Cache Docker images
        uses: AndreKurait/docker-cache@0.6.0
        if: ${{ env.ELASTIC_CLOUD_APIKEY && env.ELASTIC_CLOUD_URL }}
        with:
          key: fscrawler-docker-cache-${{ runner.os }}-${{ hashFiles('pom.xml') }}
        continue-on-error: true
      - name: Run the integration tests
        if: ${{ env.ELASTIC_CLOUD_APIKEY && env.ELASTIC_CLOUD_URL }}
        run: mvn --batch-mode install -Ddocker.skip -DskipUnitTests -Dtests.parallelism=1 -Dtests.timeoutSuite=1200000 -Dtests.timeout=900000 -Dtests.cluster.apiKey=${{ secrets.ELASTIC_CLOUD_APIKEY }} -Dtests.cluster.url=${{ secrets.ELASTIC_CLOUD_URL }}

  # We run integration tests with Elastic Cloud Serverless (if the eare set)
  it-serverless:
    runs-on: ubuntu-latest
    # needs: it
    steps:
      - uses: actions/checkout@v4
        if: ${{ env.ELASTIC_APIKEY && env.ELASTIC_URL }}
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        if: ${{ env.ELASTIC_APIKEY && env.ELASTIC_URL }}
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      - name: Cache Docker images
        uses: AndreKurait/docker-cache@0.6.0
        if: ${{ env.ELASTIC_APIKEY && env.ELASTIC_URL }}
        with:
          key: fscrawler-docker-cache-${{ runner.os }}-${{ hashFiles('pom.xml') }}
        continue-on-error: true
      - name: Run the integration tests
        if: ${{ env.ELASTIC_APIKEY && env.ELASTIC_URL }}
        run: mvn --batch-mode install -Ddocker.skip -DskipUnitTests -Dtests.parallelism=1 -Dtests.timeoutSuite=1200000 -Dtests.timeout=900000 -Dtests.cluster.apiKey=${{ secrets.ELASTIC_APIKEY }} -Dtests.cluster.url=${{ secrets.ELASTIC_URL }}

  # We run this job in parallel after the build
  build-docker:
    if: false
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      - name: Cache Docker images
        uses: AndreKurait/docker-cache@0.6.0
        with:
          key: fscrawler-docker-cache-${{ runner.os }}-${{ hashFiles('pom.xml') }}
        continue-on-error: true
      - name: Build the docker images
        run: mvn --batch-mode install -DskipTests
